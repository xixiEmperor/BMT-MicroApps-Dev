# =============================================================================
# BMT羽毛球场馆管理系统 Nginx配置文件 (详细注释版本)
# =============================================================================
# 功能说明：
# 1. 支持前后端分离架构 (Vue.js + React.js)
# 2. API接口反向代理和负载均衡
# 3. WebSocket长连接支持 (实时功能)
# 4. 静态资源优化和缓存策略
# 5. 安全防护和限流保护
# =============================================================================

# -----------------------------------------------------------------------------
# 上游服务器配置 (Upstream Configuration)
# -----------------------------------------------------------------------------

# 后端API服务器集群配置
# 说明：处理业务逻辑、数据库操作、用户认证等
upstream backend_api {
    # 后端服务器地址和端口
    # weight=1: 负载均衡权重
    # max_fails=3: 最大失败次数，超过后标记为不可用
    # fail_timeout=30s: 失败超时时间，30秒后重新尝试
    server bmt-backend:3000 weight=1 max_fails=3 fail_timeout=30s;
    
    # 保持长连接，减少连接开销
    # 32个连接池大小，适合中等并发
    keepalive 32;
}

# WebSocket服务器集群配置
# 说明：处理实时通信、消息推送、在线状态等
upstream websocket_server {
    # WebSocket服务器地址
    # 注意：WebSocket需要特殊的连接处理
    server bmt-websocket:5000 weight=1;
    
    # WebSocket连接池
    keepalive 32;
}

# -----------------------------------------------------------------------------
# 主HTTP服务器配置 (Main Server Block)
# -----------------------------------------------------------------------------
server {
    # 监听端口配置
    listen 80;  # HTTP端口
    
    # 服务器域名配置
    # 请将 your-domain.com 替换为您的实际域名
    # 支持多个域名：server_name domain1.com domain2.com;
    server_name localhost your-domain.com;
    
    # 网站根目录配置
    # Docker容器内的静态文件路径
    root /usr/share/nginx/html;
    
    # 默认首页文件
    # 按顺序查找：index.html -> index.htm
    index index.html index.htm;
    
    # =================================================================
    # 安全响应头配置 (Security Headers)
    # =================================================================
    
    # 防止页面被嵌入iframe，防止点击劫持攻击
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    # 防止MIME类型嗅探，防止XSS攻击
    add_header X-Content-Type-Options "nosniff" always;
    
    # 启用XSS过滤器，防止跨站脚本攻击
    add_header X-XSS-Protection "1; mode=block" always;
    
    # =================================================================
    # 静态资源缓存配置 (Static Assets Caching)
    # =================================================================
    # 匹配常见的静态资源文件扩展名
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # 缓存1年，适合带版本号的静态资源
        expires 1y;
        
        # 设置缓存控制头
        # public: 允许CDN和浏览器缓存
        # immutable: 告诉浏览器资源不会改变
        add_header Cache-Control "public, immutable";
        
        # 根据Accept-Encoding头返回不同版本（gzip压缩）
        add_header Vary "Accept-Encoding";
        
        # 如果文件不存在，返回404而不是fallback到index.html
        try_files $uri =404;
    }
    
    # =================================================================
    # API接口反向代理配置 (API Reverse Proxy)
    # =================================================================
    # 处理所有 /api/ 开头的请求，转发到后端服务
    location /api/ {
        # 限流保护：防止API被恶意请求
        # zone=api: 使用api限流区域
        # burst=20: 允许突发20个请求
        # nodelay: 不延迟处理突发请求
        limit_req zone=api burst=20 nodelay;
        
        # 转发到后端API服务器集群
        proxy_pass http://backend_api;
        
        # 使用HTTP/1.1协议，支持长连接
        proxy_http_version 1.1;
        
        # WebSocket升级支持（API中可能有WebSocket端点）
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        
        # 传递原始请求信息给后端
        proxy_set_header Host $host;                    # 原始Host头
        proxy_set_header X-Real-IP $remote_addr;        # 客户端真实IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 代理链IP
        proxy_set_header X-Forwarded-Proto $scheme;     # 原始协议(http/https)
        
        # 超时配置：防止长时间等待
        proxy_connect_timeout 30s;  # 连接后端超时
        proxy_send_timeout 30s;     # 发送数据超时
        proxy_read_timeout 30s;     # 读取响应超时
        
        # 禁用升级请求的缓存
        proxy_cache_bypass $http_upgrade;
        
        # 支持大文件上传（如头像、场地图片等）
        client_max_body_size 100M;
    }
    
    # =================================================================
    # WebSocket代理配置 (WebSocket Proxy) - 核心实时功能！
    # =================================================================
    # 处理您的 useRealtime.ts 中的WebSocket连接
    location /ws/ {
        # 转发到WebSocket服务器
        proxy_pass http://websocket_server;
        
        # 必须使用HTTP/1.1协议进行WebSocket握手
        proxy_http_version 1.1;
        
        # WebSocket协议升级的必需头部
        proxy_set_header Upgrade $http_upgrade;        # 协议升级请求
        proxy_set_header Connection "upgrade";         # 连接升级
        
        # 传递客户端信息
        proxy_set_header Host $host;                   # 保持原始Host
        proxy_set_header X-Real-IP $remote_addr;       # 客户端真实IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 代理链
        proxy_set_header X-Forwarded-Proto $scheme;    # 原始协议
        
        # WebSocket长连接特殊超时配置
        # 7天超时，支持长时间连接（如实时监控、在线状态）
        proxy_connect_timeout 7d;   # 建立连接超时
        proxy_send_timeout 7d;      # 发送消息超时
        proxy_read_timeout 7d;      # 读取消息超时
        
        # 禁用代理缓冲，确保消息实时传输
        proxy_buffering off;        # 不缓冲响应
        proxy_cache off;            # 不缓存响应
    }
    
    # =================================================================
    # Socket.IO支持配置 (Socket.IO Support)
    # =================================================================
    # 如果您的项目使用Socket.IO而不是原生WebSocket
    location /socket.io/ {
        # 转发到WebSocket服务器
        proxy_pass http://websocket_server;
        
        # Socket.IO需要HTTP/1.1协议
        proxy_http_version 1.1;
        
        # Socket.IO协议升级头部
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Socket.IO长连接配置
        # 支持轮询fallback和WebSocket升级
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d; 
        proxy_read_timeout 7d;
        
        # 禁用缓冲以支持实时通信
        proxy_buffering off;
    }
    
    # =================================================================
    # 前端应用路由配置 (Frontend Routing)
    # =================================================================
    
    # B端管理后台路由 (React SPA)
    # 处理 /admin/ 开头的所有路由
    location /admin/ {
        # SPA路由处理：
        # 1. 先尝试找到实际文件 ($uri)
        # 2. 再尝试找到目录 ($uri/)
        # 3. 最后fallback到管理后台入口文件
        try_files $uri $uri/ /admin/index.html;
    }
    
    # C端用户应用路由 (Vue.js SPA)
    # 处理所有其他路由（优先级最低）
    location / {
        # Vue Router的history模式支持
        # 所有未匹配的路由都返回主应用入口
        try_files $uri $uri/ /index.html;
    }
    
    # =================================================================
    # 系统功能配置 (System Functions)
    # =================================================================
    
    # 健康检查端点
    # 用于负载均衡器和监控系统检查服务状态
    location /health {
        # 不记录健康检查日志，减少日志噪音
        access_log off;
        
        # 直接返回200状态码和健康信息
        return 200 "healthy\n";
        
        # 设置响应内容类型
        add_header Content-Type text/plain;
    }
    
    # =================================================================
    # 安全配置 (Security Configuration)
    # =================================================================
    
    # 隐藏所有点文件（.htaccess, .env, .git等）
    location ~ /\. {
        deny all;  # 拒绝所有访问
    }
    
    # 隐藏敏感配置文件
    location ~* \.(env|log|ini)$ {
        deny all;  # 防止配置文件泄露
    }
    
    # =================================================================
    # 文件上传访问配置 (File Upload Access)
    # =================================================================
    
    # 用户上传文件访问（头像、场地图片等）
    location /uploads/ {
        # 映射到容器内的上传目录
        alias /app/uploads/;
        
        # 长期缓存上传的文件
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}

# =============================================================================
# HTTPS配置 (生产环境) - 取消注释以启用
# =============================================================================
# 生产环境HTTPS配置示例
# 使用前请：
# 1. 获取SSL证书（Let's Encrypt推荐）
# 2. 将证书文件放到 nginx/ssl/ 目录
# 3. 修改域名为您的实际域名
# 4. 取消下面的注释

# server {
#     # 监听HTTPS端口，启用HTTP/2
#     listen 443 ssl http2;
#     server_name your-domain.com;  # 替换为实际域名
#     
#     # SSL证书配置
#     ssl_certificate /etc/nginx/ssl/your-domain.crt;      # 证书文件
#     ssl_certificate_key /etc/nginx/ssl/your-domain.key;  # 私钥文件
#     
#     # SSL安全配置
#     ssl_protocols TLSv1.2 TLSv1.3;  # 只支持安全的TLS版本
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;   # 让客户端选择最佳加密套件
#     
#     # SSL会话缓存，提高性能
#     ssl_session_cache shared:SSL:10m;  # 10MB共享缓存
#     ssl_session_timeout 10m;           # 会话超时时间
#     
#     # 强制HTTPS（可选）
#     # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#     
#     # 其他配置与HTTP server块相同...
#     # 复制上面HTTP配置中的location块到这里
# }

# HTTP到HTTPS重定向（可选）
# server {
#     listen 80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }

# =============================================================================
# 配置文件说明总结
# =============================================================================
# 
# 本配置文件实现了以下功能：
# 
# 🌐 前端应用支持：
#    - Vue.js C端应用 (根路径 /)
#    - React.js B端管理后台 (/admin/)
#    - SPA路由支持 (History API)
# 
# 🔄 后端服务代理：
#    - REST API接口代理 (/api/)
#    - 负载均衡和故障转移
#    - 请求限流和安全防护
# 
# ⚡ 实时通信支持：
#    - WebSocket长连接 (/ws/)
#    - Socket.IO支持 (/socket.io/)
#    - 实时消息推送
# 
# 🚀 性能优化：
#    - 静态资源缓存
#    - Gzip压缩
#    - HTTP/2支持
#    - 连接复用
# 
# 🔒 安全防护：
#    - 安全响应头
#    - 敏感文件隐藏
#    - 请求限流
#    - XSS防护
# 
# 📁 文件服务：
#    - 用户上传文件访问
#    - 静态资源服务
#    - 缓存优化
# 
# 🏥 健康监控：
#    - 健康检查端点
#    - 服务状态监控
#    - 负载均衡器集成
# 
# =============================================================================

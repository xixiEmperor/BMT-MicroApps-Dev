# 前后端分离 + WebSocket 集成部署方案
version: '3.8'

services:
  # Nginx 反向代理和静态文件服务
  nginx:
    image: nginx:alpine
    container_name: bmt-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./dist:/usr/share/nginx/html:ro  # 前端构建产物
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend-api
      - websocket-server
    networks:
      - bmt-network

  # 后端API服务
  backend-api:
    # build: ./backend  # 如果有Dockerfile
    image: your-backend-api:latest  # 或使用现有镜像
    container_name: bmt-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-cache:6379
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./data/uploads:/app/uploads
    depends_on:
      - postgres-db
      - redis-cache
    networks:
      - bmt-network

  # WebSocket 实时服务
  websocket-server:
    # build: ./websocket  # WebSocket服务的Dockerfile
    image: your-websocket-server:latest
    container_name: bmt-websocket
    restart: unless-stopped
    environment:
      - WS_PORT=5000
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-cache:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis-cache
    networks:
      - bmt-network

  # PostgreSQL 数据库
  postgres-db:
    image: postgres:15-alpine
    container_name: bmt-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - bmt-network

  # Redis 缓存和消息队列
  redis-cache:
    image: redis:7-alpine
    container_name: bmt-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./data/redis:/data
    ports:
      - "6379:6379"
    networks:
      - bmt-network

networks:
  bmt-network:
    driver: bridge
    name: bmt-network

volumes:
  postgres-data:
  redis-data:
